# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T00:41:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Dict, List, Optional

from pydantic import BaseModel, Field


class AdSource(BaseModel):
    adSourceId: Optional[str] = Field(None, description='ID of this ad source.')
    name: Optional[str] = Field(
        None,
        description='Resource name of this ad source. Format is: accounts/{publisher_id}/adSources/{ad_source_id}',
    )
    title: Optional[str] = Field(None, description='Display name of this ad source.')


class AdUnit(BaseModel):
    adFormat: Optional[str] = Field(
        None,
        description='AdFormat of the ad unit. Possible values are as follows: "APP_OPEN" - App Open ad format. "BANNER" - Banner ad format. "BANNER_INTERSTITIAL" - Legacy format that can be used as either banner or interstitial. This format can no longer be created but can be targeted by mediation groups. "INTERSTITIAL" - A full screen ad. Supported ad types are "RICH_MEDIA" and "VIDEO". "NATIVE" - Native ad format. "REWARDED" - An ad that, once viewed, gets a callback verifying the view so that a reward can be given to the user. Supported ad types are "RICH_MEDIA" (interactive) and video where video can not be excluded. "REWARDED_INTERSTITIAL" - Rewarded Interstitial ad format. Only supports video ad type. See https://support.google.com/admob/answer/9884467.',
    )
    adTypes: Optional[List[str]] = Field(
        None,
        description='Ad media type supported by this ad unit. Possible values as follows: "RICH_MEDIA" - Text, image, and other non-video media. "VIDEO" - Video media.',
    )
    adUnitId: Optional[str] = Field(
        None,
        description='The externally visible ID of the ad unit which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654/0123456789',
    )
    appId: Optional[str] = Field(
        None,
        description='The externally visible ID of the app this ad unit is associated with. Example: ca-app-pub-9876543210987654~0123456789',
    )
    displayName: Optional[str] = Field(
        None,
        description='The display name of the ad unit as shown in the AdMob UI, which is provided by the user. The maximum length allowed is 80 characters.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for this ad unit. Format is accounts/{publisher_id}/adUnits/{ad_unit_id_fragment} Example: accounts/pub-9876543210987654/adUnits/0123456789',
    )


class AppApprovalState(Enum):
    APP_APPROVAL_STATE_UNSPECIFIED = 'APP_APPROVAL_STATE_UNSPECIFIED'
    ACTION_REQUIRED = 'ACTION_REQUIRED'
    IN_REVIEW = 'IN_REVIEW'
    APPROVED = 'APPROVED'


class AppLinkedAppInfo(BaseModel):
    appStoreId: Optional[str] = Field(
        None,
        description='The app store ID of the app; present if and only if the app is linked to an app store. If the app is added to the Google Play store, it will be the application ID of the app. For example: "com.example.myapp". See https://developer.android.com/studio/build/application-id. If the app is added to the Apple App Store, it will be app store ID. For example "105169111". Note that setting the app store id is considered an irreversible action. Once an app is linked, it cannot be unlinked.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Output only. Display name of the app as it appears in the app store. This is an output-only field, and may be empty if the app cannot be found in the store.',
    )


class AppManualAppInfo(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The display name of the app as shown in the AdMob UI, which is provided by the user. The maximum length allowed is 80 characters.',
    )


class Date(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class DateRange(BaseModel):
    endDate: Optional[Date] = Field(
        None,
        description='End date of the date range, inclusive. Must be greater than or equal to the start date.',
    )
    startDate: Optional[Date] = Field(
        None,
        description='Start date of the date range, inclusive. Must be less than or equal to the end date.',
    )


class ListAdSourcesResponse(BaseModel):
    adSources: Optional[List[AdSource]] = Field(None, description='The ad sources.')
    nextPageToken: Optional[str] = Field(
        None,
        description='Used to set the `page_token` in the `ListAdSourcesRequest` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )


class ListAdUnitsResponse(BaseModel):
    adUnits: Optional[List[AdUnit]] = Field(
        None, description='The resulting ad units for the requested account.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If not empty, indicates that there may be more ad units for the request; this value should be passed in a new `ListAdUnitsRequest`.',
    )


class LocalizationSettings(BaseModel):
    currencyCode: Optional[str] = Field(
        None,
        description='Currency code of the earning related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion. Defaults to the account currency code if unspecified.',
    )
    languageCode: Optional[str] = Field(
        None,
        description="Language used for any localized text, such as some dimension value display labels. The language tag defined in the IETF BCP47. Defaults to 'en-US' if unspecified.",
    )


class Dimension(Enum):
    DIMENSION_UNSPECIFIED = 'DIMENSION_UNSPECIFIED'
    DATE = 'DATE'
    MONTH = 'MONTH'
    WEEK = 'WEEK'
    AD_SOURCE = 'AD_SOURCE'
    AD_SOURCE_INSTANCE = 'AD_SOURCE_INSTANCE'
    AD_UNIT = 'AD_UNIT'
    APP = 'APP'
    MEDIATION_GROUP = 'MEDIATION_GROUP'
    COUNTRY = 'COUNTRY'
    FORMAT = 'FORMAT'
    PLATFORM = 'PLATFORM'
    MOBILE_OS_VERSION = 'MOBILE_OS_VERSION'
    GMA_SDK_VERSION = 'GMA_SDK_VERSION'
    APP_VERSION_NAME = 'APP_VERSION_NAME'
    SERVING_RESTRICTION = 'SERVING_RESTRICTION'


class Metric(Enum):
    METRIC_UNSPECIFIED = 'METRIC_UNSPECIFIED'
    AD_REQUESTS = 'AD_REQUESTS'
    CLICKS = 'CLICKS'
    ESTIMATED_EARNINGS = 'ESTIMATED_EARNINGS'
    IMPRESSIONS = 'IMPRESSIONS'
    IMPRESSION_CTR = 'IMPRESSION_CTR'
    MATCHED_REQUESTS = 'MATCHED_REQUESTS'
    MATCH_RATE = 'MATCH_RATE'
    OBSERVED_ECPM = 'OBSERVED_ECPM'


class Order(Enum):
    SORT_ORDER_UNSPECIFIED = 'SORT_ORDER_UNSPECIFIED'
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class MediationReportSpecSortCondition(BaseModel):
    dimension: Optional[Dimension] = Field(
        None, description='Sort by the specified dimension.'
    )
    metric: Optional[Metric] = Field(None, description='Sort by the specified metric.')
    order: Optional[Order] = Field(
        None, description='Sorting order of the dimension or metric.'
    )


class Dimension3(Enum):
    DIMENSION_UNSPECIFIED = 'DIMENSION_UNSPECIFIED'
    DATE = 'DATE'
    MONTH = 'MONTH'
    WEEK = 'WEEK'
    AD_UNIT = 'AD_UNIT'
    APP = 'APP'
    AD_TYPE = 'AD_TYPE'
    COUNTRY = 'COUNTRY'
    FORMAT = 'FORMAT'
    PLATFORM = 'PLATFORM'
    MOBILE_OS_VERSION = 'MOBILE_OS_VERSION'
    GMA_SDK_VERSION = 'GMA_SDK_VERSION'
    APP_VERSION_NAME = 'APP_VERSION_NAME'
    SERVING_RESTRICTION = 'SERVING_RESTRICTION'


class Metric2(Enum):
    METRIC_UNSPECIFIED = 'METRIC_UNSPECIFIED'
    AD_REQUESTS = 'AD_REQUESTS'
    CLICKS = 'CLICKS'
    ESTIMATED_EARNINGS = 'ESTIMATED_EARNINGS'
    IMPRESSIONS = 'IMPRESSIONS'
    IMPRESSION_CTR = 'IMPRESSION_CTR'
    IMPRESSION_RPM = 'IMPRESSION_RPM'
    MATCHED_REQUESTS = 'MATCHED_REQUESTS'
    MATCH_RATE = 'MATCH_RATE'
    SHOW_RATE = 'SHOW_RATE'


class NetworkReportSpecSortCondition(BaseModel):
    dimension: Optional[Dimension3] = Field(
        None, description='Sort by the specified dimension.'
    )
    metric: Optional[Metric2] = Field(None, description='Sort by the specified metric.')
    order: Optional[Order] = Field(
        None, description='Sorting order of the dimension or metric.'
    )


class PublisherAccount(BaseModel):
    currencyCode: Optional[str] = Field(
        None,
        description='Currency code of the earning-related metrics, which is the 3-letter code defined in ISO 4217. The daily average rate is used for the currency conversion.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name of this account. Format is accounts/{publisher_id}.',
    )
    publisherId: Optional[str] = Field(
        None,
        description='The unique ID by which this publisher account can be identified in the API requests (for example, pub-1234567890).',
    )
    reportingTimeZone: Optional[str] = Field(
        None,
        description='The time zone that is used in reports that are generated for this account. The value is a time-zone ID as specified by the CLDR project, for example, "America/Los_Angeles".',
    )


class ReportHeader(BaseModel):
    dateRange: Optional[DateRange] = Field(
        None,
        description='The date range for which the report is generated. This is identical to the range specified in the report request.',
    )
    localizationSettings: Optional[LocalizationSettings] = Field(
        None,
        description='Localization settings of the report. This is identical to the settings in the report request.',
    )
    reportingTimeZone: Optional[str] = Field(
        None,
        description='The report time zone. The value is a time-zone ID as specified by the CLDR project, for example, "America/Los_Angeles".',
    )


class ReportRowDimensionValue(BaseModel):
    displayLabel: Optional[str] = Field(
        None,
        description='The localized string representation of the value. If unspecified, the display label should be derived from the value.',
    )
    value: Optional[str] = Field(
        None,
        description="Dimension value in the format specified in the report's spec Dimension enum.",
    )


class ReportRowMetricValue(BaseModel):
    doubleValue: Optional[float] = Field(
        None,
        description='Double precision (approximate) decimal values. Rates are from 0 to 1.',
    )
    integerValue: Optional[str] = Field(None, description='Metric integer value.')
    microsValue: Optional[str] = Field(
        None,
        description='Amount in micros. One million is equivalent to one unit. Currency value is in the unit (USD, EUR or other) specified by the request. For example, $6.50 whould be represented as 6500000 micros.',
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    DATA_BEFORE_ACCOUNT_TIMEZONE_CHANGE = 'DATA_BEFORE_ACCOUNT_TIMEZONE_CHANGE'
    DATA_DELAYED = 'DATA_DELAYED'
    OTHER = 'OTHER'
    REPORT_CURRENCY_NOT_ACCOUNT_CURRENCY = 'REPORT_CURRENCY_NOT_ACCOUNT_CURRENCY'


class ReportWarning(BaseModel):
    description: Optional[str] = Field(
        None, description='Describes the details of the warning message, in English.'
    )
    type: Optional[Type] = Field(None, description='Type of the warning.')


class StringList(BaseModel):
    values: Optional[List[str]] = Field(None, description='The string values.')


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class App(BaseModel):
    appApprovalState: Optional[AppApprovalState] = Field(
        None, description='Output only. The approval state for the app.'
    )
    appId: Optional[str] = Field(
        None,
        description='The externally visible ID of the app which can be used to integrate with the AdMob SDK. This is a read only property. Example: ca-app-pub-9876543210987654~0123456789',
    )
    linkedAppInfo: Optional[AppLinkedAppInfo] = Field(
        None,
        description='Immutable. The information for an app that is linked to an app store. This field is present if and only if the app is linked to an app store.',
    )
    manualAppInfo: Optional[AppManualAppInfo] = Field(
        None,
        description='The information for an app that is not linked to any app store. After an app is linked, this information is still retrivable. If no name is provided for the app upon creation, a placeholder name will be used.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for this app. Format is accounts/{publisher_id}/apps/{app_id_fragment} Example: accounts/pub-9876543210987654/apps/0123456789',
    )
    platform: Optional[str] = Field(
        None,
        description='Describes the platform of the app. Limited to "IOS" and "ANDROID".',
    )


class ListAppsResponse(BaseModel):
    apps: Optional[List[App]] = Field(
        None, description='The resulting apps for the requested account.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If not empty, indicates that there may be more apps for the request; this value should be passed in a new `ListAppsRequest`.',
    )


class ListPublisherAccountsResponse(BaseModel):
    account: Optional[List[PublisherAccount]] = Field(
        None, description='Publisher that the client credentials can access.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='If not empty, indicates that there might be more accounts for the request; you must pass this value in a new `ListPublisherAccountsRequest`.',
    )


class MediationReportSpecDimensionFilter(BaseModel):
    dimension: Optional[Dimension] = Field(
        None, description='Applies the filter criterion to the specified dimension.'
    )
    matchesAny: Optional[StringList] = Field(
        None,
        description='Matches a row if its value for the specified dimension is in one of the values specified in this condition.',
    )


class NetworkReportSpecDimensionFilter(BaseModel):
    dimension: Optional[Dimension3] = Field(
        None, description='Applies the filter criterion to the specified dimension.'
    )
    matchesAny: Optional[StringList] = Field(
        None,
        description='Matches a row if its value for the specified dimension is in one of the values specified in this condition.',
    )


class ReportFooter(BaseModel):
    matchingRowCount: Optional[str] = Field(
        None,
        description='Total number of rows that matched the request. Warning: This count does NOT always match the number of rows in the response. Do not make that assumption when processing the response.',
    )
    warnings: Optional[List[ReportWarning]] = Field(
        None, description='Warnings associated with generation of the report.'
    )


class ReportRow(BaseModel):
    dimensionValues: Optional[Dict[str, ReportRowDimensionValue]] = Field(
        None,
        description='Map of dimension values in a row, with keys as enum name of the dimensions.',
    )
    metricValues: Optional[Dict[str, ReportRowMetricValue]] = Field(
        None,
        description='Map of metric values in a row, with keys as enum name of the metrics. If a metric being requested has no value returned, the map will not include it.',
    )


class GenerateMediationReportResponse(BaseModel):
    footer: Optional[ReportFooter] = Field(
        None,
        description='Additional information about the generated report, such as warnings about the data.',
    )
    header: Optional[ReportHeader] = Field(
        None,
        description='Report generation settings that describes the report contents, such as the report date range and localization settings.',
    )
    row: Optional[ReportRow] = Field(None, description='Actual report data.')


class GenerateNetworkReportResponse(BaseModel):
    footer: Optional[ReportFooter] = Field(
        None,
        description='Additional information about the generated report, such as warnings about the data.',
    )
    header: Optional[ReportHeader] = Field(
        None,
        description='Report generation settings that describes the report contents, such as the report date range and localization settings.',
    )
    row: Optional[ReportRow] = Field(None, description='Actual report data.')


class MediationReportSpec(BaseModel):
    dateRange: Optional[DateRange] = Field(
        None, description='The date range for which the report is generated.'
    )
    dimensionFilters: Optional[List[MediationReportSpecDimensionFilter]] = Field(
        None,
        description='Describes which report rows to match based on their dimension values.',
    )
    dimensions: Optional[List[Dimension]] = Field(
        None,
        description='List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.',
    )
    localizationSettings: Optional[LocalizationSettings] = Field(
        None, description='Localization settings of the report.'
    )
    maxReportRows: Optional[int] = Field(
        None,
        description='Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.',
    )
    metrics: Optional[List[Metric]] = Field(
        None,
        description='List of metrics of the report. A report must specify at least one metric.',
    )
    sortConditions: Optional[List[MediationReportSpecSortCondition]] = Field(
        None,
        description='Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='A report time zone. Accepts an IANA TZ name values, such as "America/Los_Angeles." If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The "America/Los_Angeles" is the only supported value at the moment.',
    )


class NetworkReportSpec(BaseModel):
    dateRange: Optional[DateRange] = Field(
        None, description='The date range for which the report is generated.'
    )
    dimensionFilters: Optional[List[NetworkReportSpecDimensionFilter]] = Field(
        None,
        description='Describes which report rows to match based on their dimension values.',
    )
    dimensions: Optional[List[Dimension3]] = Field(
        None,
        description='List of dimensions of the report. The value combination of these dimensions determines the row of the report. If no dimensions are specified, the report returns a single row of requested metrics for the entire account.',
    )
    localizationSettings: Optional[LocalizationSettings] = Field(
        None, description='Localization settings of the report.'
    )
    maxReportRows: Optional[int] = Field(
        None,
        description='Maximum number of report data rows to return. If the value is not set, the API returns as many rows as possible, up to 100000. Acceptable values are 1-100000, inclusive. Values larger than 100000 return an error.',
    )
    metrics: Optional[List[Metric2]] = Field(
        None,
        description='List of metrics of the report. A report must specify at least one metric.',
    )
    sortConditions: Optional[List[NetworkReportSpecSortCondition]] = Field(
        None,
        description='Describes the sorting of report rows. The order of the condition in the list defines its precedence; the earlier the condition, the higher its precedence. If no sort conditions are specified, the row ordering is undefined.',
    )
    timeZone: Optional[str] = Field(
        None,
        description='A report time zone. Accepts an IANA TZ name values, such as "America/Los_Angeles." If no time zone is defined, the account default takes effect. Check default value by the get account action. **Warning:** The "America/Los_Angeles" is the only supported value at the moment.',
    )


class GenerateMediationReportRequest(BaseModel):
    reportSpec: Optional[MediationReportSpec] = Field(
        None, description='Network report specification.'
    )


class GenerateNetworkReportRequest(BaseModel):
    reportSpec: Optional[NetworkReportSpec] = Field(
        None, description='Network report specification.'
    )
